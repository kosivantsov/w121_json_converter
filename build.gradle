import org.panteleyev.jpackage.ImageType
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.panteleyev.jpackageplugin' version '1.7.5'
}

group = 'org.truetranslation'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    poiVersion = '5.2.2'
    batikVersion = '1.17'
    groovyVersion = '3.0.9'
    commonsTextVersion = '1.10.0'
    flatlafVersion = '3.4.1'
    gsonVersion = '2.10.1'
}

dependencies {
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.formdev:flatlaf:${flatlafVersion}"
    implementation "com.formdev:flatlaf-intellij-themes:${flatlafVersion}"
    implementation "org.apache.commons:commons-text:${commonsTextVersion}"
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "org.apache.poi:poi:${poiVersion}"
    implementation "org.apache.poi:poi-ooxml:${poiVersion}"
    implementation "org.apache.poi:poi-ooxml-full:${poiVersion}"
    implementation "org.apache.xmlbeans:xmlbeans:5.0.3"
    implementation "commons-io:commons-io:2.11.0"
    implementation "org.apache.logging.log4j:log4j-core:2.17.2"
    implementation "org.apache.xmlgraphics:batik-transcoder:${batikVersion}"
    implementation "org.apache.xmlgraphics:batik-codec:${batikVersion}"
}

application {
    mainClass = 'JsonConverterGui'
    applicationDefaultJvmArgs = [
        "-Dapple.awt.application.name=The Word121 JSON Converter",
        "-Dapple.awt.application.appearance=system"
    ]
}

shadowJar {
    archiveBaseName = 'JsonConverter'
    archiveClassifier = ''
    archiveVersion = '1.0'
    mergeServiceFiles()
    manifest {
        attributes(
            'Main-Class': application.mainClass,
            'Implementation-Version': project.version,
            'Implementation-Vendor': "Kos Ivantsov|https://truetranslation.org"
        )
    }
}

task generateConfig {
    doLast {
        def configFile = new File("$buildDir/resources/main/config.properties")
        configFile.parentFile.mkdirs()
        def appTitle = jpackage.appName.get()
        configFile.text = "app.title=${appTitle}"
    }
}
processResources.dependsOn generateConfig

sourceSets {
    main {
        java { srcDirs = ['src/main/java'] }
        groovy { srcDirs = ['src/main/groovy'] }
    }
}

jpackage {
    dependsOn(shadowJar)

    // --- Core Settings ---
    mainJar = shadowJar.archiveFile.get().asFile.name
    mainClass = application.mainClass.get()
    input = layout.buildDirectory.dir("libs")
    destination = layout.buildDirectory.dir('jpackage')

    // --- App Metadata ---
    appName = 'The Word121 JSON Converter'
    appVersion = project.version
    vendor = 'Kos Ivantsov | https://truetranslation.org'
    description = 'A tool for converting JSON files.'
    copyright = "Copyright (c) 2025, Kos Ivantsov"

    // --- JVM Options ---
    javaOptions.add("-Dapple.awt.application.appearance=system")
    javaOptions.add("-Dapple.awt.application.name=The Word121 JSON Converter")
    javaOptions.add('-Xdock:icon=$APPDIR/The Word121 JSON Converter.icns')

    // --- Platform-Specific Configuration ---
    if (Os.isFamily(Os.FAMILY_MAC)) {
        type = ImageType.APP_IMAGE
        icon = file('src/main/resources/The Word121 JSON Converter.icns')
        
        // **CORRECTION HERE: Set macOS properties directly on the task**
        macPackageIdentifier = 'org.truetranslation.w121jsonconverter'

    } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        type = ImageType.APP_IMAGE
        icon = file('src/main/resources/The Word121 JSON Converter.ico')
        
        // Windows-specific properties like winMenu or winShortcut would go here
        // e.g., winMenu = false
        
    } else {
        type = ImageType.DEB
        icon = file('src/main/resources/The Word121 JSON Converter.png')
        
        // Linux-specific properties like linuxPackageName would go here
        // e.g., linuxPackageName = 'w121-json-converter'
    }
    
    addModules = ['java.base', 'java.desktop', 'java.prefs', 'java.logging']

    // Post-processing task to forcibly overwrite the icon
    doLast {
        if (Os.isFamily(Os.FAMILY_MAC)) {
            println ">>> Forcibly overwriting macOS app icon."
            def appNameValue = jpackage.appName.get()
            def sourceIconFile = file("src/main/resources/${appNameValue}.icns")
            def destIconFile = file("${destination.get().asFile}/${appNameValue}.app/Contents/Resources/${appNameValue}.icns")

            if (sourceIconFile.exists()) {
                copy {
                    from sourceIconFile
                    into destIconFile.getParentFile()
                    rename { String fileName ->
                        destIconFile.name
                    }
                    fileMode = 0755
                }
                println ">>> Successfully replaced icon at: ${destIconFile}"
            } else {
                println ">>> WARNING: Source icon not found at ${sourceIconFile}. Cannot replace app icon."
            }
        }
    }
}
